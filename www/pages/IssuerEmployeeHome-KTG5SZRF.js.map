{
  "version": 3,
  "sources": ["../../front/src/pages/IssuerEmployeeHome.js"],
  "sourcesContent": ["import PocketBase from '../components/pocketbase.es.mjs'\r\nconst pb = new PocketBase(window.location.origin)\r\n\r\nlet gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nlet storage = window.MHR.storage\r\nlet myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\nlet html = window.MHR.html\r\n\r\n// This is the page where employees can logon to the Issuer\r\nwindow.MHR.register(\"IssuerEmployeeHome\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter() {\r\n\r\n        console.log(document.location)\r\n\r\n        // Check for redirect during the authentication flow\r\n        if (document.URL.includes(\"state=\") && document.URL.includes(\"auth-mock\")) {\r\n            console.log(\"************Redirected with state**************\")\r\n            gotoPage(\"LoadAndSaveQRVC\", document.URL)\r\n            return;\r\n        }\r\n\r\n        var email, verified\r\n        if (pb.authStore.isValid) {\r\n            email = pb.authStore.model.email\r\n            verified = pb.authStore.model.verified\r\n        }\r\n\r\n        var theHtml\r\n\r\n\r\n        // Present a different screen depending on the status of the user\r\n        if (!pb.authStore.isValid) {\r\n            // If the authStore is not yet valid, try to logon\r\n            \r\n            theHtml = await logonScreen()\r\n\r\n        } else {\r\n\r\n            if (!verified) {\r\n                theHtml = validateEmailScreen()\r\n            } else {\r\n                gotoPage(\"IssuerLandingPage\")\r\n                return\r\n            }\r\n\r\n        }\r\n\r\n        this.render(theHtml, false)\r\n\r\n    }\r\n\r\n})\r\n\r\n\r\nfunction validateEmailScreen() {\r\n\r\n    var email, verified\r\n    if (pb.authStore.isValid) {\r\n        email = pb.authStore.model.email\r\n        verified = pb.authStore.model.verified\r\n    }\r\n\r\n\r\n    return html`\r\n    <ion-card>\r\n        <ion-card-header>\r\n            <ion-card-title>Welcome back ${email}</ion-card-title>\r\n        </ion-card-header>\r\n\r\n        <ion-card-content>\r\n\r\n            <div class=\"ion-margin-top\">\r\n            <ion-text class=\"ion-margin-top\">You need to verify your email before being able to use this system.</ion-text>\r\n            </div>\r\n\r\n        </ion-card-content>\r\n\r\n        <div class=\"ion-margin-start ion-margin-bottom\">\r\n        <ion-button @click=${() => requestVerification(email)}>\r\n                ${T(\"Request verification\")}\r\n            </ion-button>\r\n            <ion-button @click=${() => pb.authStore.clear()}>\r\n                ${T(\"Logoff\")}\r\n            </ion-button>\r\n        </div>\r\n\r\n    </ion-card>\r\n    `\r\n\r\n}\r\n\r\nasync function requestVerification(email) {\r\n\r\n    console.log(\"Requesting verification\")\r\n    const result = await pb.collection('signers').requestVerification(email)\r\n    console.log(\"After requesting verification:\", result)\r\n\r\n}\r\n\r\n// logonScreen allows the employee two things:\r\n// 1. Logon to the system if she already has registered\r\n// 2. Start the process of registering and validating her email address, so she will be able to perform logon after validation \r\nasync function logonScreen() {\r\n    \r\n    return html`\r\n    <ion-card>\r\n        <ion-card-header>\r\n            <ion-card-title>Logon with your registered email</ion-card-title>\r\n        </ion-card-header>\r\n    \r\n        <ion-card-content>\r\n    \r\n            <ion-list>\r\n    \r\n                <ion-item>\r\n                    <ion-input id=\"email\" type=\"email\" label=\"Email:\" helperText=\"Enter a valid email\" placeholder=\"email@domain.com\"></ion-input>\r\n                </ion-item>\r\n    \r\n            </ion-list>\r\n    \r\n            <div class=\"ion-margin-top\">\r\n                <h2>You need to register and verify your email before being able to logon and use this system.<h2>\r\n            </div>\r\n    \r\n        </ion-card-content>\r\n    \r\n        <div class=\"ion-margin-start ion-margin-bottom\">\r\n            <ion-button @click=${()=> logonWithEmail()}>\r\n                ${T(\"Logon\")}\r\n            </ion-button>\r\n            <ion-button @click=${()=> registerEmail()}>\r\n                ${T(\"Register\")}\r\n            </ion-button>\r\n        </div>\r\n    \r\n    </ion-card>\r\n    `\r\n\r\n}\r\n\r\nasync function logonWithEmail() {\r\n\r\n    let params = new URL(document.location).searchParams\r\n    let txcode = params.get(\"transaction_code\")\r\n    mylog(`txcode: ${txcode}`)\r\n\r\n    // Retrieve the content of the email entry field\r\n    const email = document.getElementById(\"email\").value\r\n    console.log(email)\r\n    if (email.length == 0) {\r\n        return\r\n    } \r\n\r\n    // Make sure the authStore is cleared before loging in\r\n    pb.authStore.clear()\r\n\r\n    // Logon with a default password (we do not use the password so it is not a security problem) and reload the page\r\n    try {\r\n        const authData = await pb.collection('signers').authWithPassword(\r\n            email,\r\n            txcode,\r\n        );\r\n        console.log(authData)\r\n            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error in logon\", msg: error.message})\r\n        return       \r\n    }\r\n\r\n    // Everything OK, reload the page, which will be in the logged-on status\r\n    window.MHR.cleanReload()\r\n\r\n}\r\n\r\n// registerEmail starts the process of registration of the employee email\r\nasync function registerEmail() {\r\n    const email = document.getElementById(\"email\").value\r\n    console.log(email)\r\n    if (email.length == 0) {\r\n        return\r\n    } \r\n\r\n    const data = {\r\n        \"email\": email,\r\n        \"emailVisibility\": true,\r\n        \"password\": \"12345678\",\r\n        \"passwordConfirm\": \"12345678\",\r\n    };\r\n\r\n    try {\r\n        console.log(\"Requesting verification\")\r\n        var result = await pb.collection('signers').requestVerification(email)\r\n        console.log(\"After requesting verification:\", result)            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error requesting verification\", msg: error.message})\r\n        return        \r\n    }\r\n\r\n    alert(\"Registration requested. Please check your email for confirmation.\")\r\n\r\n    window.MHR.cleanReload()\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
