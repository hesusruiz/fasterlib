{
  "version": 3,
  "sources": ["../../front/src/pages/IssuerSignerHome.js"],
  "sourcesContent": ["import PocketBase from '../components/pocketbase.es.mjs'\r\n\r\nconst pb = new PocketBase(window.location.origin)\r\n\r\nlet gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nlet storage = window.MHR.storage\r\nlet myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\nlet html = window.MHR.html\r\nlet cleanReload = window.MHR.cleanReload\r\n\r\n// This is the home page for the Issuer.\r\n// It needs to be served under a reverse proxy that requests TLS client authentication,\r\n// so the browser requests to the user to select one of the certificates installed in\r\n// the user machine.\r\nwindow.MHR.register(\"IssuerSignerHome\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter() {\r\n        var theHtml\r\n\r\n        // There are three possibilities:\r\n        // 1. The authstore is valid and the email is already verified: the user is already logged in and\r\n        // there is a valid session, so we can proceed directly to present the main Verifiable Credentials page.\r\n        // 2. The authstrore is valid but the email lacks verification: we go to the email verification screen.\r\n        // 3. The authstore is not valid: we go to the login/registration screen.\r\n\r\n        if (pb.authStore.isValid) {\r\n            if (pb.authStore.model.verified) {\r\n                gotoPage(\"ListOfferingsPage\")\r\n            } else {\r\n                theHtml = validateEmailScreen()\r\n                this.render(theHtml, false)\r\n            }\r\n        } else {\r\n            theHtml = await logonScreen()\r\n            this.render(theHtml, false)\r\n        }\r\n\r\n    }\r\n\r\n})\r\n\r\nasync function logonScreen() {\r\n\r\n    var certInfo\r\n    // Ask the server to provide info about the eIDAS certificate used by the user for TLS client authentication\r\n    // We will use the Subject Common Name as the user name for display purposes.\r\n    // The Subject of the eIDAS certificate is the \"official\" info of the legal representative of the company.\r\n    try {\r\n        certInfo = await pb.send('/apisigner/getcertinfo')\r\n        var commonName = certInfo.common_name\r\n        mylog(certInfo)\r\n        if (!certInfo.common_name) {\r\n            myerror(\"eIDAS certificate does not have Common Name\")\r\n            gotoPage(\"ErrorPage\", {title: \"Error retrieving eIDAS certificate info\", msg: \"eIDAS certificate does not have Common Name\"})\r\n            return           \r\n        }\r\n    } catch (error) {\r\n        myerror(error)\r\n        gotoPage(\"ErrorPage\", {title: \"Error retrieving eIDAS certificate info\", msg: error.message})\r\n        return       \r\n    }\r\n\r\n    // Create and present the logon screen    \r\n    return html`\r\n    <div>\r\n        <style>\r\n            me {margin:auto;max-width: 800px;}\r\n        </style>\r\n    \r\n        <div class=\"w3-panel w3-card-2\">\r\n            <h1>Welcome ${commonName}</h1>\r\n\r\n            <p>The information above is coming directly from your eIDAS certificate.</p>\r\n            <p>\r\n                If this is your first time here, you can type your company email and click the <b>Register</b> button.\r\n                We will use the email and some information inside your certificate to register you in the platform, so you will be able to start issuing LEARCredentials to one or more of your employees or contractors.\r\n            </p>\r\n            <p>If you have already registered your email, just enter it and click the <b>Logon</b> button.</p>\r\n\r\n            <h3>Enter your email to logon or to register</h3>\r\n\r\n            <ion-loading id=\"loadingmsg\" message=\"Logging on...\"></ion-loading>\r\n\r\n            <ion-list>\r\n\r\n                <ion-item>\r\n                    <ion-input id=\"email\" type=\"email\" label=\"Email:\"></ion-input>\r\n                </ion-item>\r\n\r\n            </ion-list>\r\n\r\n            <div class=\"ion-margin\">\r\n                <ion-text color=\"danger\"><p id=\"errortext\"></p></ion-text>\r\n    \r\n                <ion-button id=\"login\" @click=${()=> logonWithEmail()}>\r\n                    ${T(\"Logon (if you are already registered)\")}\r\n                </ion-button>\r\n\r\n                <ion-button color=\"secondary\" @click=${()=> registerEmail()}>\r\n                    ${T(\"Register (if this is the first time)\")}\r\n                </ion-button>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    `\r\n}\r\n\r\n\r\nfunction validateEmailScreen() {\r\n\r\n    var email, verified\r\n    if (pb.authStore.isValid) {\r\n        email = pb.authStore.model.email\r\n        verified = pb.authStore.model.verified\r\n    }\r\n\r\n    return html`\r\n    <div>\r\n    \r\n        <ion-card>\r\n            <ion-card-header>\r\n                <ion-card-title>Welcome back ${email}</ion-card-title>\r\n            </ion-card-header>\r\n    \r\n            <ion-card-content>\r\n    \r\n                <div class=\"ion-margin-top\">\r\n                    <ion-text class=\"ion-margin-top\">You need to verify your email before being able to use this system.</ion-text>\r\n                </div>\r\n    \r\n            </ion-card-content>\r\n    \r\n            <div class=\"ion-margin-start ion-margin-bottom\">\r\n                <ion-button @click=${()=> requestVerification(email)}>\r\n                    ${T(\"Request verification\")}\r\n                </ion-button>\r\n                <ion-button @click=${()=> pb.authStore.clear()}>\r\n                    ${T(\"Logoff\")}\r\n                </ion-button>\r\n            </div>\r\n    \r\n        </ion-card>\r\n    </div>\r\n    `\r\n\r\n}\r\n\r\nasync function requestVerification(email) {\r\n\r\n    console.log(\"Requesting verification\")\r\n    const result = await pb.collection('signers').requestVerification(email)\r\n    console.log(\"After requesting verification:\", result)\r\n\r\n}\r\n\r\n\r\n// logonWithEmail is called from the Logon button on the logon page\r\nasync function logonWithEmail() {\r\n\r\n    // Clear any error message\r\n    document.getElementById(\"errortext\").innerText = \"\"\r\n\r\n    // Get the email that the user entered\r\n    const input = document.getElementById(\"email\")\r\n    const email = input.value\r\n    console.log(email)\r\n\r\n    if (email.length == 0) {\r\n        console.log(\"empty field\")\r\n        document.getElementById(\"errortext\").innerText = \"Enter your email\"\r\n        return\r\n    } \r\n\r\n    // Make sure the authStore is cleared before loging in\r\n    pb.authStore.clear()\r\n\r\n    // Present a spinner while the server is busy\r\n    const loader = me(\"#loadingmsg\")\r\n    loader.present()\r\n\r\n    // Authenticate with the server. The password is not used, but the server requires it.\r\n    try {\r\n        const authData = await pb.collection('signers').authWithPassword(\r\n            email,\r\n            \"12345678\",\r\n        );\r\n        console.log(authData)\r\n            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error in logon\", msg: error.message})\r\n        return       \r\n    } finally {\r\n        loader.dismiss()\r\n    }\r\n\r\n    // Reload the page\r\n    cleanReload()\r\n\r\n}\r\n\r\n// registerEmail is called from the Register button in the Logon page\r\nasync function registerEmail() {\r\n    // Clear any error message\r\n    document.getElementById(\"errortext\").innerText = \"\"\r\n\r\n    // Get the email that the user entered\r\n    const input = document.getElementById(\"email\")\r\n    const email = input.value\r\n    console.log(email)\r\n\r\n    if (email.length == 0) {\r\n        console.log(\"empty field\")\r\n        document.getElementById(\"errortext\").innerText = \"Enter your email\"\r\n        return\r\n    } \r\n\r\n    // Prepare data to be sent to the server. The password is not used, but the server requires it\r\n    const data = {\r\n        \"email\": email,\r\n        \"emailVisibility\": true,\r\n        \"password\": \"12345678\",\r\n        \"passwordConfirm\": \"12345678\",\r\n    };\r\n\r\n    // Create a record for the legal representative in the server\r\n    try {\r\n        const record = await pb.collection('signers').create(data);\r\n        console.log(record)            \r\n    } catch (error) {\r\n        myerror(error)\r\n        gotoPage(\"ErrorPage\", {title: \"Error in registration\", msg: error.message})\r\n        return\r\n    }\r\n\r\n    // Request automatically a verification of the email\r\n    try {\r\n        console.log(\"Requesting verification\")\r\n        var result = await pb.collection('signers').requestVerification(email)\r\n        console.log(\"After requesting verification:\", result)            \r\n    } catch (error) {\r\n        myerror(error)\r\n        gotoPage(\"ErrorPage\", {title: \"Error requesting verification\", msg: error.message})\r\n        return        \r\n    }\r\n\r\n    alert(\"Registration requested. Please check your email for confirmation.\")\r\n\r\n    cleanReload()\r\n}\r\n\r\n\r\nwindow.MHR.register(\"LogoffPage\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter() {\r\n\r\n        console.log(\"AuthStore is valid:\", pb.authStore.isValid)\r\n        console.log(pb.authStore.model)\r\n        var email, verified\r\n        if (pb.authStore.isValid) {\r\n            email = pb.authStore.model.email\r\n            verified = pb.authStore.model.verified\r\n        }\r\n\r\n        var theHtml = html`\r\n        <ion-card>\r\n            <ion-card-header>\r\n                <ion-card-title>Confirm logoff</ion-card-title>\r\n            </ion-card-header>\r\n    \r\n            <ion-card-content>\r\n    \r\n                <div class=\"ion-margin-top\">\r\n                <ion-text class=\"ion-margin-top\">Please confirm logoff.</ion-text>\r\n                </div>\r\n    \r\n            </ion-card-content>\r\n    \r\n            <div class=\"ion-margin-start ion-margin-bottom\">\r\n                <ion-button @click=${() => {pb.authStore.clear();window.MHR.cleanReload()}}>\r\n                    ${T(\"Logoff\")}\r\n                </ion-button>\r\n            </div>\r\n    \r\n        </ion-card>\r\n        `\r\n\r\n        this.render(theHtml, false)\r\n\r\n    }\r\n\r\n\r\n})\r\n"],
  "mappings": ";;;;;;AAEA,IAAM,KAAK,IAAI,OAAW,OAAO,SAAS,MAAM;AAEhD,IAAI,WAAW,OAAO,IAAI;AAC1B,IAAI,SAAS,OAAO,IAAI;AACxB,IAAI,UAAU,OAAO,IAAI;AACzB,IAAI,UAAU,OAAO,IAAI,QAAQ;AACjC,IAAI,QAAQ,OAAO,IAAI,QAAQ;AAC/B,IAAI,OAAO,OAAO,IAAI;AACtB,IAAI,cAAc,OAAO,IAAI;AAM7B,OAAO,IAAI,SAAS,oBAAoB,cAAc,OAAO,IAAI,aAAa;AAAA,EAE1E,YAAY,IAAI;AACZ,UAAM,EAAE;AAAA,EACZ;AAAA,EAEA,MAAM,QAAQ;AACV,QAAI;AAQJ,QAAI,GAAG,UAAU,SAAS;AACtB,UAAI,GAAG,UAAU,MAAM,UAAU;AAC7B,iBAAS,mBAAmB;AAAA,MAChC,OAAO;AACH,kBAAU,oBAAoB;AAC9B,aAAK,OAAO,SAAS,KAAK;AAAA,MAC9B;AAAA,IACJ,OAAO;AACH,gBAAU,MAAM,YAAY;AAC5B,WAAK,OAAO,SAAS,KAAK;AAAA,IAC9B;AAAA,EAEJ;AAEJ,CAAC;AAED,eAAe,cAAc;AAEzB,MAAI;AAIJ,MAAI;AACA,eAAW,MAAM,GAAG,KAAK,wBAAwB;AACjD,QAAI,aAAa,SAAS;AAC1B,UAAM,QAAQ;AACd,QAAI,CAAC,SAAS,aAAa;AACvB,cAAQ,6CAA6C;AACrD,eAAS,aAAa,EAAC,OAAO,2CAA2C,KAAK,8CAA6C,CAAC;AAC5H;AAAA,IACJ;AAAA,EACJ,SAAS,OAAO;AACZ,YAAQ,KAAK;AACb,aAAS,aAAa,EAAC,OAAO,2CAA2C,KAAK,MAAM,QAAO,CAAC;AAC5F;AAAA,EACJ;AAGA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOe,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAwBY,MAAK,eAAe,CAAC;AAAA,sBAC/C,EAAE,uCAAuC,CAAC;AAAA;AAAA;AAAA,uDAGT,MAAK,cAAc,CAAC;AAAA,sBACrD,EAAE,sCAAsC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO/D;AAGA,SAAS,sBAAsB;AAE3B,MAAI,OAAO;AACX,MAAI,GAAG,UAAU,SAAS;AACtB,YAAQ,GAAG,UAAU,MAAM;AAC3B,eAAW,GAAG,UAAU,MAAM;AAAA,EAClC;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA,+CAKoC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAYf,MAAK,oBAAoB,KAAK,CAAC;AAAA,sBAC9C,EAAE,sBAAsB,CAAC;AAAA;AAAA,qCAEV,MAAK,GAAG,UAAU,MAAM,CAAC;AAAA,sBACxC,EAAE,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQjC;AAEA,eAAe,oBAAoB,OAAO;AAEtC,UAAQ,IAAI,yBAAyB;AACrC,QAAM,SAAS,MAAM,GAAG,WAAW,SAAS,EAAE,oBAAoB,KAAK;AACvE,UAAQ,IAAI,kCAAkC,MAAM;AAExD;AAIA,eAAe,iBAAiB;AAG5B,WAAS,eAAe,WAAW,EAAE,YAAY;AAGjD,QAAM,QAAQ,SAAS,eAAe,OAAO;AAC7C,QAAM,QAAQ,MAAM;AACpB,UAAQ,IAAI,KAAK;AAEjB,MAAI,MAAM,UAAU,GAAG;AACnB,YAAQ,IAAI,aAAa;AACzB,aAAS,eAAe,WAAW,EAAE,YAAY;AACjD;AAAA,EACJ;AAGA,KAAG,UAAU,MAAM;AAGnB,QAAM,SAAS,GAAG,aAAa;AAC/B,SAAO,QAAQ;AAGf,MAAI;AACA,UAAM,WAAW,MAAM,GAAG,WAAW,SAAS,EAAE;AAAA,MAC5C;AAAA,MACA;AAAA,IACJ;AACA,YAAQ,IAAI,QAAQ;AAAA,EAExB,SAAS,OAAO;AACZ,aAAS,aAAa,EAAC,OAAO,kBAAkB,KAAK,MAAM,QAAO,CAAC;AACnE;AAAA,EACJ,UAAE;AACE,WAAO,QAAQ;AAAA,EACnB;AAGA,cAAY;AAEhB;AAGA,eAAe,gBAAgB;AAE3B,WAAS,eAAe,WAAW,EAAE,YAAY;AAGjD,QAAM,QAAQ,SAAS,eAAe,OAAO;AAC7C,QAAM,QAAQ,MAAM;AACpB,UAAQ,IAAI,KAAK;AAEjB,MAAI,MAAM,UAAU,GAAG;AACnB,YAAQ,IAAI,aAAa;AACzB,aAAS,eAAe,WAAW,EAAE,YAAY;AACjD;AAAA,EACJ;AAGA,QAAM,OAAO;AAAA,IACT,SAAS;AAAA,IACT,mBAAmB;AAAA,IACnB,YAAY;AAAA,IACZ,mBAAmB;AAAA,EACvB;AAGA,MAAI;AACA,UAAM,SAAS,MAAM,GAAG,WAAW,SAAS,EAAE,OAAO,IAAI;AACzD,YAAQ,IAAI,MAAM;AAAA,EACtB,SAAS,OAAO;AACZ,YAAQ,KAAK;AACb,aAAS,aAAa,EAAC,OAAO,yBAAyB,KAAK,MAAM,QAAO,CAAC;AAC1E;AAAA,EACJ;AAGA,MAAI;AACA,YAAQ,IAAI,yBAAyB;AACrC,QAAI,SAAS,MAAM,GAAG,WAAW,SAAS,EAAE,oBAAoB,KAAK;AACrE,YAAQ,IAAI,kCAAkC,MAAM;AAAA,EACxD,SAAS,OAAO;AACZ,YAAQ,KAAK;AACb,aAAS,aAAa,EAAC,OAAO,iCAAiC,KAAK,MAAM,QAAO,CAAC;AAClF;AAAA,EACJ;AAEA,QAAM,mEAAmE;AAEzE,cAAY;AAChB;AAGA,OAAO,IAAI,SAAS,cAAc,cAAc,OAAO,IAAI,aAAa;AAAA,EAEpE,YAAY,IAAI;AACZ,UAAM,EAAE;AAAA,EACZ;AAAA,EAEA,MAAM,QAAQ;AAEV,YAAQ,IAAI,uBAAuB,GAAG,UAAU,OAAO;AACvD,YAAQ,IAAI,GAAG,UAAU,KAAK;AAC9B,QAAI,OAAO;AACX,QAAI,GAAG,UAAU,SAAS;AACtB,cAAQ,GAAG,UAAU,MAAM;AAC3B,iBAAW,GAAG,UAAU,MAAM;AAAA,IAClC;AAEA,QAAI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAee,MAAM;AAAC,SAAG,UAAU,MAAM;AAAE,aAAO,IAAI,YAAY;AAAA,IAAC,CAAC;AAAA,sBACpE,EAAE,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOzB,SAAK,OAAO,SAAS,KAAK;AAAA,EAE9B;AAGJ,CAAC;",
  "names": []
}
