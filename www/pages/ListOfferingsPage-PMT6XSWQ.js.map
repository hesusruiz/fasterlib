{
  "version": 3,
  "sources": ["../../front/src/pages/ListOfferingsPage.js"],
  "sourcesContent": ["import PocketBase from '../components/pocketbase.es.mjs'\r\nimport { decodeJWT } from '../components/jwt'\r\n\r\nconst pb = new PocketBase(window.location.origin)\r\n\r\nlet gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nlet storage = window.MHR.storage\r\nlet myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\nlet html = window.MHR.html\r\n\r\nvar pageName = \"ListOfferingsPage\"\r\nwindow.MHR.register(pageName, class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter() {\r\n\r\n        console.log(\"AuthStore is valid:\", pb.authStore.isValid)\r\n        console.log(pb.authStore.model)\r\n\r\n        if (!pb.authStore.isValid || !pb.authStore.model.verified) {\r\n            myerror(`${pageName}: user not verified`)\r\n            gotoPage(\"ErrorPage\", {title: \"User not verified\"})\r\n            return\r\n        }\r\n\r\n        // Get the list of credentials\r\n        const records = await pb.collection('credentials').getFullList({\r\n            sort: '-created',\r\n        });\r\n\r\n        var theHtml\r\n        theHtml = listCredentialOffers(records)\r\n        this.render(theHtml, false)\r\n\r\n    }\r\n\r\n})\r\n\r\n\r\nfunction listCredentialOffers(records) {\r\n\r\n    return html`\r\n<ion-card>\r\n    <ion-card-header>\r\n        <ion-card-title>List of Offers</ion-card-title>\r\n    </ion-card-header>\r\n\r\n    <ion-card-content>\r\n\r\n        ${records.length == 0 ? html`<h1>No records</h1>` : html`\r\n\r\n        <div class=\"w3-responsive\">\r\n\r\n            <table class=\"w3-table w3-table-all\">\r\n\r\n                <tr>\r\n                    <th> </th>\r\n                    <th>Created</th>\r\n                    <th>Status</th>\r\n                    <th>Holder</th>\r\n                    <th>Creator</th>\r\n                    <th>Signer</th>\r\n                </tr>\r\n\r\n\r\n                ${records.map((cred) => {return html`\r\n                <tr>\r\n                    <td><ion-button size=\"small\" @click=${()=> gotoPage(\"DisplayOfferingQRCode\", cred)}> View </ion-button></td>\r\n                    <td>${cred.created}</td>\r\n                    <td>${cred.status}</td>\r\n                    <td>${cred.email}</td>\r\n                    <td>${cred.creator_email}</td>\r\n                    <td>${cred.signer_email}</td>\r\n                </tr>`\r\n                })}\r\n\r\n            </table>\r\n        </div>\r\n\r\n        `}\r\n\r\n    </ion-card-content>\r\n\r\n    <div class=\"ion-margin-start ion-margin-bottom\">\r\n        <ion-button @click=${()=> gotoPage(\"CreateOfferingPage\")}>\r\n            ${T(\"Create New Credential Offer\")}\r\n        </ion-button>\r\n    </div>\r\n\r\n\r\n</ion-card>\r\n\r\n`\r\n\r\n}\r\n\r\n\r\nwindow.MHR.register(\"DisplayOfferingQRCode\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter(cred) {\r\n\r\n        const theHtml = renderMandateReadOnly(cred)\r\n      \r\n        this.render(theHtml, false)\r\n\r\n    }\r\n\r\n})\r\n\r\nfunction renderMandateReadOnly(cred) {\r\n\r\n    console.log(\"Status\", cred.status)\r\n\r\n    var decoded = decodeJWT(cred.raw)\r\n    const mandate = decoded.body.credentialSubject.mandate\r\n    const mandator = mandate.mandator\r\n    console.log(mandator)\r\n    const mandatee = mandate.mandatee\r\n    console.log(mandatee)\r\n    const powers = mandate.power\r\n    console.log(powers)\r\n\r\n    var theHtml =  html`\r\n<ion-card>\r\n    <ion-card-header>\r\n        <ion-card-title>Credential Offer</ion-card-title>\r\n    </ion-card-header>\r\n\r\n    <ion-card-content>\r\n\r\n        <ion-grid>\r\n            <ion-row>\r\n                <ion-col size=\"12\" size-md=\"6\">\r\n\r\n                    <ion-item-group>\r\n\r\n                        <ion-item-divider>\r\n                            <ion-label> Mandator (Signer) </ion-label>\r\n                        </ion-item-divider>\r\n\r\n                        <ion-item>\r\n                            <ion-input id=\"OrganizationIdentifier\" label=\"OrganizationIdentifier:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.organizationIdentifier}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"Organization\" label=\"Organization:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.organization}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"CommonName\" label=\"CommonName:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.commonName}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"EmailAddress\" label=\"EmailAddress:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.emailAddress}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"SerialNumber\" label=\"SerialNumber:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.serialNumber}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"Country\" label=\"Country:\" label-placement=\"stacked\"\r\n                            value=\"${mandator.country}\" readonly></ion-input>\r\n                        </ion-item>\r\n\r\n                    </ion-item-group>\r\n\r\n                </ion-col>\r\n\r\n                <ion-col size=\"12\" size-md=\"6\">\r\n\r\n\r\n                    <ion-item-group>\r\n\r\n                        <ion-item-divider>\r\n                            <ion-label> Mandatee (Holder and Subject) </ion-label>\r\n                        </ion-item-divider>\r\n\r\n                        <ion-item>\r\n                            <ion-input id=\"first_name\" label=\"First name:\" label-placement=\"stacked\"\r\n                            value=\"${mandatee.first_name}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"last_name\" label=\"Last name:\" label-placement=\"stacked\"\r\n                            value=\"${mandatee.last_name}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"gender\" label=\"Gender:\" label-placement=\"stacked\"\r\n                            value=\"${mandatee.gender}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"email\" label=\"Email:\" label-placement=\"stacked\"\r\n                            value=\"${mandatee.email}\" readonly></ion-input>\r\n                        </ion-item>\r\n                        <ion-item>\r\n                            <ion-input id=\"mobile_phone\" label=\"Mobile phone:\" label-placement=\"stacked\"\r\n                            value=\"${mandatee.mobile_phone}\" readonly></ion-input>\r\n                        </ion-item>\r\n\r\n                    </ion-item-group>\r\n\r\n                </ion-col>\r\n            </ion-row>\r\n\r\n            <ion-row>\r\n                ${powers.map((pow, index) => {return html`\r\n                    <ion-col size=\"12\" size-md=\"6\">\r\n\r\n                        <ion-item-group>\r\n    \r\n                            <ion-item-divider>\r\n                                <ion-label> Powers (${index+1} of ${powers.length}) </ion-label>\r\n                            </ion-item-divider>\r\n    \r\n                            <ion-item>\r\n                                <ion-input label=\"Domain:\" label-placement=\"stacked\" value=\"DOME\" readonly=\"true\"></ion-input>\r\n                            </ion-item>\r\n    \r\n                            <ion-item>\r\n                                <ion-input label=\"Function:\" label-placement=\"stacked\"\r\n                                value=\"${pow.tmf_function}\" readonly></ion-input>\r\n                            </ion-item>\r\n    \r\n                            <ion-item>\r\n                                <ion-input label=\"Allowed actions::\" label-placement=\"stacked\"\r\n                                value=\"${pow.tmf_action}\" readonly></ion-input>\r\n                            </ion-item>\r\n    \r\n                        </ion-item-group>\r\n                    </ion-col>    \r\n\r\n                `\r\n                })}\r\n\r\n            </ion-row>\r\n\r\n        </ion-grid>\r\n\r\n    </ion-card-content>\r\n\r\n    <div class=\"ion-margin-start ion-margin-bottom\">\r\n\r\n        <ion-button @click=${()=> history.back()}>\r\n            ${T(\"Back\")}\r\n        </ion-button>\r\n\r\n        ${(cred.status == \"tobesigned\") ? html`\r\n        <ion-button @click=${()=> signCredentialOfferingLocal(cred)}>\r\n            ${T(\"Sign in Local\")}\r\n        </ion-button>\r\n        <ion-button @click=${()=> signCredentialOfferingInServer(cred)}>\r\n            ${T(\"Sign Credential\")}\r\n        </ion-button>\r\n        ` : null}\r\n\r\n        <ion-button @click=${()=> sendReminder(cred.id)}>\r\n            ${T(\"Send reminder\")}\r\n        </ion-button>\r\n    \r\n    </div>\r\n\r\n\r\n</ion-card>\r\n`\r\n\r\nreturn theHtml\r\n\r\n}\r\n\r\nasync function sendReminder(id) {\r\n    try {\r\n        var record = await pb.send('/apisigner/sendreminder/'+id)\r\n        console.log(record)            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error sending reminder \"+id, msg: error.message})\r\n        return\r\n    }\r\n\r\n    alert(\"Reminder sent\")\r\n\r\n}\r\n\r\nasync function signCredentialOfferingLocal(record) {\r\n\r\n    var learcred = decodeJWT(record.raw).body\r\n\r\n    if (!learcred.credentialSubject) {\r\n        gotoPage(\"ErrorPage\", {title: \"Invalid credential\", msg: \"signCredentialOfferingLocal: Invalid credential received\"})\r\n        return\r\n    }\r\n\r\n    // Sign the credential in the local machine, to be able to access the certificate store\r\n    try {\r\n        var result = await fetch('http://127.0.0.1/signcredential', \r\n        {\r\n            method: \"POST\",\r\n            body: learcred,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n        var signedCredential = result.signed\r\n        console.log(signedCredential)            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error creating credential\", msg: error.message})\r\n        return\r\n    }\r\n\r\n    // Store the signed credential with the status \"signed\"\r\n    record.status = \"signed\"\r\n    record.raw = signedCredential\r\n    record.signer_email = pb.authStore.model.email\r\n    try {\r\n        console.log(\"Storing signed credential in Record\", record.id)\r\n        const result = await pb.collection('credentials').update(record.id, record);\r\n        console.log(result)            \r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", {title: \"Error saving credential\", msg: error.message})\r\n        return\r\n    }\r\n\r\n    alert(\"Credential signed!!\")\r\n\r\n    goHome()\r\n\r\n    return\r\n\r\n}\r\n\r\nasync function signCredentialOfferingInServer(record) {\r\n\r\n    const serverURL = \"https://dts-sign-engine-demo.pre-api.digitelts.com/api/v1/services/signworker/signjades\"\r\n\r\n    var learcred = decodeJWT(record.raw).body\r\n\r\n    if (!learcred.credentialSubject) {\r\n        gotoPage(\"ErrorPage\", { title: \"Invalid credential\", msg: \"signCredentialOfferingLocal: Invalid credential received\" })\r\n        return\r\n    }\r\n\r\n\r\n    // Create the payload in the body\r\n    var body = {\r\n        \"document\": learcred\r\n    }\r\n\r\n    console.log(\"The payload before stringify\", body)\r\n    const strbody = JSON.stringify(body)\r\n    console.log(\"The payload after stringify\", strbody)\r\n\r\n    // Sign the credential in the local machine, to be able to access the certificate store\r\n    try {\r\n        var response = await fetch(serverURL,\r\n            {\r\n                method: \"POST\",\r\n                body: strbody,\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            })\r\n        console.log(response)\r\n    } catch (error) {\r\n        await gotoPage(\"ErrorPage\", { \"title\": \"Error signing credential\", \"msg\": error.message })\r\n        return\r\n    }\r\n\r\n    if (!response.ok) {\r\n        const errormsg = `POST ${serverURL}: ${response.statusText}`\r\n        myerror(errormsg)\r\n        await gotoPage(\"ErrorPage\", { \"title\": \"Error sending data\", \"msg\": errormsg })\r\n        return\r\n    }                \r\n\r\n    var responseJSON = await response.json();\r\n    console.log(responseJSON)\r\n    mylog(`doPOST ${serverURL}:`, responseJSON)\r\n    const signedDocument = responseJSON.data.signedDocument\r\n\r\n\r\n    // Store the signed credential with the status \"signed\"\r\n    record.status = \"signed\"\r\n    record.raw = signedDocument\r\n    record.signer_email = pb.authStore.model.email\r\n    console.log(\"Updating credential\")\r\n    console.log(record)\r\n    try {\r\n        console.log(\"Storing signed credential in Record\", record.id)\r\n        const result = await pb.collection('credentials').update(record.id, record);\r\n        console.log(result)\r\n    } catch (error) {\r\n        gotoPage(\"ErrorPage\", { title: \"Error saving credential\", msg: error.message })\r\n        return\r\n    }\r\n\r\n    alert(\"Credential signed!!\")\r\n\r\n    goHome()\r\n\r\n    return\r\n\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["result"]
}
