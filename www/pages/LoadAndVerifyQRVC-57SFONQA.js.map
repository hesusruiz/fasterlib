{
  "version": 3,
  "sources": ["../../front/src/pages/LoadAndVerifyQRVC.js"],
  "sourcesContent": ["let myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\n\r\nlet gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nconst PRE_AUTHORIZED_CODE_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:pre-authorized_code';\r\n\r\nwindow.MHR.register(\"LoadAndVerifyQRVC\", class LoadAndVerifyQRVC extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter(qrData) {\r\n        let html = this.html\r\n\r\n        // We should have received a URL that was scanned as a QR code.\r\n        // Perform some sanity checks on the parameter\r\n        if (qrData == null || !qrData.startsWith) {\r\n            console.log(\"The scanned QR does not contain a valid URL\")\r\n            gotoPage(\"ErrorPage\", {\"title\": \"No data received\", \"msg\": \"The scanned QR does not contain a valid URL\"})\r\n            return\r\n        }\r\n\r\n        // Make sure it is a fully qualified URL\r\n        if (!qrData.startsWith(\"https://\") && !qrData.startsWith(\"http://\")) {\r\n            console.log(\"The scanned QR does not contain a valid URL\")\r\n            gotoPage(\"ErrorPage\", {\"title\": \"No data received\", \"msg\": \"The scanned QR does not contain a valid URL\"})\r\n            return\r\n        }\r\n\r\n\r\n        if (qrData.includes(\"/credential-offer?credential_offer_uri=\")) {\r\n            var credentialOffer = await getCredentialOffer(qrData);\r\n\r\n            var code = credentialOffer[\"grants\"][PRE_AUTHORIZED_CODE_GRANT_TYPE][\"pre-authorized_code\"];\r\n            var format = credentialOffer[\"credentials\"][0][\"format\"];\r\n            var credentialTypes = credentialOffer[\"credentials\"].map(credential => credential[\"type\"]);\r\n            var issuerAddress = credentialOffer[\"credential_issuer\"];\r\n\r\n            // get the openid info from the well-known endpoint\r\n            var openIdInfo = await getOpenIdConfig(issuerAddress)\r\n            var credentialEndpoint = openIdInfo[\"credential_endpoint\"]\r\n            var tokenEndpoint = openIdInfo[\"token_endpoint\"]\r\n            // get an accesstoken for retrieving the credential\r\n            var authTokenObject = await getAuthToken(tokenEndpoint, code)\r\n            var accessToken = authTokenObject[\"access_token\"]\r\n            // get the actual credential\r\n            var credentialResponse = await getCredentialOIDC4VCI(credentialEndpoint, accessToken, format, credentialTypes)\r\n            console.log(\"Received the credentials.\")\r\n            this.VC = JSON.stringify(credentialResponse[\"credential\"], null, 2)\r\n        } else {\r\n            // We have received a URL that was scanned as a QR code.\r\n            // First we should do a GET to the URL to retrieve the VC.\r\n            this.VC = await getVerifiableCredentialLD(qrData);\r\n        }\r\n\r\n        // The VC should be in JSON-LD format (for the moment is the only format we support)\r\n\r\n        let theCredential = JSON.parse(this.VC)\r\n        let claims = theCredential[\"credentialSubject\"]\r\n        let roles = claims.roles[0].names\r\n        console.log(roles)\r\n\r\n        let theHtml = html`\r\n        <div class=\"w3-container\">\r\n            <div class=\"w3-card-4 w3-center w3-margin-top w3-padding-bottom\">\r\n        \r\n                <header class=\"w3-container color-primary\" style=\"padding:10px\">\r\n                    <h4>${T(\"Credential data\")}</h4>\r\n                </header>\r\n        \r\n                <div class=\"w3-container ptb-16\">\r\n                  <p>Name: ${claims.name}</p>\r\n                  <p>Roles: ${roles}<p>\r\n                </div>\r\n        \r\n       \r\n            </div>\r\n        </div>\r\n        `\r\n\r\n        this.render(theHtml)\r\n    }\r\n\r\n    saveVC() {\r\n        console.log(\"Save VC \" + JSON.stringify(this.VC))\r\n        // Store it in local storage\r\n        mylog(\"Store \" + this.VC)\r\n        let total = 0;\r\n        if(!!window.localStorage.getItem(\"W3C_VC_LD_TOTAL\")) {\r\n          total = parseInt(window.localStorage.getItem(\"W3C_VC_LD_TOTAL\"))\r\n          mylog(\"Total \" + total)\r\n        }\r\n        const id = \"W3C_VC_LD_\"+total\r\n        window.localStorage.setItem(id, this.VC)\r\n        total = total + 1;\r\n        mylog(total + \" credentials in storage.\")\r\n        window.localStorage.setItem(\"W3C_VC_LD_TOTAL\", total)\r\n        // Reload the application with a clean URL\r\n        gotoPage(\"DisplayVC\", id)\r\n        return\r\n    }\r\n\r\n})\r\n\r\nasync function getCredentialOIDC4VCI(credentialEndpoint, accessToken, format, credential_type) {\r\n    try {\r\n      var credentialReq = {\r\n        format: format,\r\n        types: credential_type\r\n      }\r\n      console.log(\"Body \" + JSON.stringify(credentialReq))\r\n      let response = await fetch(credentialEndpoint, {\r\n        method: \"POST\",\r\n        cache: \"no-cache\",\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer ' + accessToken\r\n        },\r\n        body: JSON.stringify(credentialReq),\r\n        mode: \"cors\"\r\n      });\r\n      if (response.ok) {\r\n        var credentialBody = await response.json();\r\n      } else {\r\n        if (response.status == 403) {\r\n          alert.apply(\"error 403\");\r\n          window.MHR.goHome();\r\n          return \"Error 403\";\r\n        }\r\n        var error = await response.text();\r\n        myerror(error);\r\n        window.MHR.goHome();\r\n        alert(error);\r\n        return null;\r\n      }\r\n    } catch (error2) {\r\n      myerror(error2);\r\n      alert(error2);\r\n      return null;\r\n    }\r\n    console.log(credentialBody);\r\n    return credentialBody;\r\n  }\r\n  \r\n  async function getAuthToken(tokenEndpoint, preAuthCode) {\r\n    try {\r\n      var formAttributes = {\r\n        'grant_type': PRE_AUTHORIZED_CODE_GRANT_TYPE,\r\n        'code': preAuthCode\r\n      }\r\n      var formBody = [];\r\n      for (var property in formAttributes) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(formAttributes[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n      }\r\n      formBody = formBody.join(\"&\");\r\n      console.log(\"The body: \" + formBody)\r\n  \r\n      let response = await fetch(tokenEndpoint, {\r\n        method: \"POST\",\r\n        cache: \"no-cache\",\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n        body: formBody,\r\n        mode: \"cors\"\r\n      });\r\n      if (response.ok) {\r\n        var tokenBody = await response.json();\r\n      } else {\r\n        if (response.status == 403) {\r\n          alert.apply(\"error 403\");\r\n          window.MHR.goHome();\r\n          return \"Error 403\";\r\n        }\r\n        var error = await response.text();\r\n        myerror(error);\r\n        window.MHR.goHome();\r\n        alert(error);\r\n        return null;\r\n      }\r\n    } catch (error2) {\r\n      myerror(error2);\r\n      alert(error2);\r\n      return null;\r\n    }\r\n    console.log(tokenBody);\r\n    return tokenBody;\r\n  }\r\n  \r\n  async function getOpenIdConfig(issuerAddress) {\r\n    try {\r\n  \r\n      console.log(\"Get: \" + issuerAddress)\r\n      let response = await fetch(issuerAddress + \"/.well-known/openid-configuration\", {\r\n        cache: \"no-cache\",\r\n        mode: \"cors\"\r\n      });\r\n      if (response.ok) {\r\n        var openIdInfo = await response.json();\r\n      } else {\r\n        if (response.status == 403) {\r\n          alert.apply(\"error 403\");\r\n          window.MHR.goHome();\r\n          return \"Error 403\";\r\n        }\r\n        var error = await response.text();\r\n        myerror(error);\r\n        window.MHR.goHome();\r\n        alert(error);\r\n        return null;\r\n      }\r\n    } catch (error2) {\r\n      myerror(error2);\r\n      alert(error2);\r\n      return null;\r\n    }\r\n    console.log(openIdInfo);\r\n    return openIdInfo;\r\n  }\r\n  \r\n\r\nasync function getVerifiableCredentialLD(backEndpoint) {\r\n    try {\r\n        let response = await fetch(backEndpoint, {\r\n            mode: \"cors\"\r\n        });\r\n        if (response.ok) {\r\n            var vc = await response.text();\r\n        } else {\r\n            if (response.status == 403) {\r\n                alert.apply(\"error 403\");\r\n                window.MHR.goHome();\r\n                return \"Error 403\";\r\n            }\r\n            var error = await response.text();\r\n            myerror(error);\r\n            window.MHR.goHome();\r\n            alert(error);\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        myerror(error);\r\n        alert(error);\r\n        return null;\r\n    }\r\n    console.log(vc);\r\n    return vc;\r\n}\r\n\r\nasync function getCredentialOffer(url) {\r\n    try {\r\n        const urlParams = new URL(url).searchParams;\r\n        const credentialOfferURI = decodeURIComponent(urlParams.get('credential_offer_uri'));\r\n        console.log(\"Get: \" + credentialOfferURI)\r\n        let response = await fetch(credentialOfferURI, {\r\n            cache: \"no-cache\",\r\n            mode: \"cors\"\r\n        });\r\n        if (response.ok) {\r\n            const credentialOffer = await response.json();\r\n            console.log(credentialOffer);\r\n            return credentialOffer;\r\n        } else {\r\n            if (response.status === 403) {\r\n                alert.apply(\"error 403\");\r\n                window.MHR.goHome();\r\n                return \"Error 403\";\r\n            }\r\n            var error = await response.text();\r\n            myerror(error);\r\n            window.MHR.goHome();\r\n            alert(error);\r\n            return null;\r\n        }\r\n    } catch (error2) {\r\n        myerror(error2);\r\n        alert(error2);\r\n        return null;\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["error"]
}
