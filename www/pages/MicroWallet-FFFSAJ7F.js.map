{
  "version": 3,
  "sources": ["../../front/src/pages/MicroWallet.js"],
  "sourcesContent": ["import { renderLEARCredentialCard } from '../components/renderLEAR'\r\nimport { getOrCreateDidKey } from '../components/crypto'\r\n\r\nlet gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nlet storage = window.MHR.storage\r\nlet myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\n\r\nwindow.MHR.register(\"MicroWallet\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter() {\r\n\r\n        // Create a new did:key (ECDSA/P-256) if it was not already created\r\n        const mydid = await getOrCreateDidKey()\r\n\r\n        console.log(\"My DID\", mydid.did)\r\n\r\n        let html = this.html\r\n\r\n        // We can receive QRs via the URL or scanning with the camera\r\n\r\n        // If URL specifies a QR then\r\n        //     check it and store in local storage\r\n        //     clean the URL and reload the app\r\n        // If URL is clean (initially or after reloading)\r\n        //     retrieve the QR from local storage and display it\r\n\r\n        let params = new URL(document.location).searchParams\r\n        console.log(\"MicroWallet\", document.location)\r\n\r\n        // Check for redirect during the authentication flow\r\n        if (document.URL.includes(\"state=\") && document.URL.includes(\"auth-mock\")) {\r\n            console.log(\"MicroWallet ************Redirected with state**************\")\r\n            gotoPage(\"LoadAndSaveQRVC\", document.URL)\r\n            return;\r\n        }\r\n        \r\n        if (document.URL.includes(\"code=\")) {\r\n            console.log(\"MicroWallet ************Redirected with code**************\")\r\n            gotoPage(\"LoadAndSaveQRVC\", document.URL)\r\n            return;\r\n        }\r\n        \r\n        // QR code found in URL. Process and display it\r\n        let scope = params.get(\"scope\")\r\n        if (scope !== null) {\r\n            console.log(\"detected scope\")\r\n            gotoPage(\"SIOPSelectCredential\", document.URL)\r\n            return;\r\n        }\r\n\r\n        // Check if we are authenticating\r\n        let request_uri = params.get(\"request_uri\")\r\n        if (request_uri !== null) {\r\n            // Unescape the query parameter\r\n            request_uri = decodeURIComponent(request_uri)\r\n            console.log(\"MicroWallet request_uri\", request_uri)\r\n            console.log(\"Going to SIOPSelectCredential with\", document.URL)\r\n            gotoPage(\"SIOPSelectCredential\", document.URL)\r\n            return;\r\n        }\r\n\r\n        // Check if we are in a credential issuance scenario\r\n        let credential_offer_uri = params.get(\"credential_offer_uri\")\r\n        if (credential_offer_uri) {\r\n            console.log(\"MicroWallet\", credential_offer_uri)\r\n            await gotoPage(\"LoadAndSaveQRVC\", document.location.href)\r\n            return;\r\n        }\r\n\r\n        // The URL specifies a command\r\n        let command = params.get(\"command\")\r\n        if (command !== null) {\r\n            \r\n            switch (command) {\r\n                case \"getvc\":\r\n                    var vc_id = params.get(\"vcid\")\r\n                    await gotoPage(\"LoadAndSaveQRVC\", vc_id)\r\n                    return;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Retrieve all recent credentials from storage\r\n        var credentials = await storage.credentialsGetAllRecent()\r\n        \r\n        if (!credentials) {\r\n            gotoPage(\"ErrorPage\", { \"title\": \"Error\", \"msg\": \"Error getting recent credentials\" })\r\n            return\r\n        }\r\n\r\n        // Display the credentials\r\n        const theDivs = []\r\n\r\n        for (const vcraw of credentials) {\r\n\r\n            if (vcraw.type == \"jwt_vc\") {\r\n\r\n                // We use the hash of the credential as its unique ID\r\n                const currentId = vcraw.hash\r\n\r\n                // Get the unencoded payload\r\n                const vc = vcraw.decoded\r\n\r\n                const status = vcraw.status\r\n\r\n                // Render the credential\r\n                const div = html`\r\n            <ion-card>\r\n            \r\n                ${renderLEARCredentialCard(vc, vcraw.status)}\r\n    \r\n                <div class=\"ion-margin-start ion-margin-bottom\">\r\n                    <ion-button @click=${() => gotoPage(\"DisplayVC\", vcraw)}>\r\n                        <ion-icon slot=\"start\" name=\"construct\"></ion-icon>\r\n                        ${T(\"Details\")}\r\n                    </ion-button>\r\n\r\n                    <ion-button color=\"danger\" @click=${() => this.presentActionSheet(currentId)}>\r\n                        <ion-icon slot=\"start\" name=\"trash\"></ion-icon>\r\n                        ${T(\"Delete\")}\r\n                    </ion-button>\r\n                </div>\r\n            </ion-card>\r\n            `\r\n\r\n                theDivs.push(div)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        var theHtml\r\n\r\n        if (theDivs.length > 0) {\r\n\r\n            theHtml = html`\r\n                <ion-card>\r\n                    <ion-card-content>\r\n                        <h2>Click here to scan a QR code</h2>\r\n                    </ion-card-content>\r\n\r\n                    <div class=\"ion-margin-start ion-margin-bottom\">\r\n                        <ion-button @click=${() => gotoPage(\"ScanQrPage\")}>\r\n                            <ion-icon slot=\"start\" name=\"camera\"></ion-icon>\r\n                            ${T(\"Scan QR\")}\r\n                        </ion-button>\r\n                    </div>\r\n\r\n                </ion-card>\r\n\r\n                ${theDivs}\r\n\r\n                <ion-action-sheet id=\"mw_actionSheet\" @ionActionSheetDidDismiss=${(ev) => this.deleteVC(ev)}>\r\n                </ion-action-sheet>\r\n\r\n            `\r\n\r\n        } else {\r\n            mylog(\"No credentials\")\r\n\r\n            // We do not have a QR in the local storage\r\n            theHtml = html`\r\n                <ion-card>\r\n                    <ion-card-header>\r\n                        <ion-card-title>The wallet is empty</ion-card-title>\r\n                    </ion-card-header>\r\n\r\n                    <ion-card-content>\r\n                    <div class=\"text-medium\">You need to obtain a Verifiable Credential from an Issuer, by scanning the QR in the screen of the Issuer page</div>\r\n                    </ion-card-content>\r\n\r\n                    <div class=\"ion-margin-start ion-margin-bottom\">\r\n                        <ion-button @click=${() => gotoPage(\"ScanQrPage\")}>\r\n                            <ion-icon slot=\"start\" name=\"camera\"></ion-icon>\r\n                            ${T(\"Scan a QR\")}\r\n                        </ion-button>\r\n                    </div>\r\n\r\n                </ion-card>\r\n            `\r\n\r\n        }\r\n\r\n        this.render(theHtml, false)\r\n\r\n    }\r\n\r\n\r\n    async presentActionSheet(currentId) {\r\n        const actionSheet = document.getElementById(\"mw_actionSheet\")\r\n        actionSheet.header = 'Confirm to delete credential'\r\n        actionSheet.buttons = [\r\n            {\r\n                text: 'Delete',\r\n                role: 'destructive',\r\n                data: {\r\n                    action: 'delete',\r\n                },\r\n            },\r\n            {\r\n                text: 'Cancel',\r\n                role: 'cancel',\r\n                data: {\r\n                    action: 'cancel',\r\n                },\r\n            },\r\n        ];\r\n\r\n        this.credentialIdToDelete = currentId\r\n        await actionSheet.present();\r\n    }\r\n\r\n    async deleteVC(ev) {\r\n        // Delete only if event is delete\r\n        if (ev.detail.data) {\r\n            if (ev.detail.data.action == \"delete\") {\r\n                // Get the credential to delete\r\n                const currentId = this.credentialIdToDelete\r\n                mylog(\"deleting credential\", currentId)\r\n                await storage.credentialsDelete(currentId)\r\n                goHome()\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n})\r\n\r\n"],
  "mappings": "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",
  "names": []
}
